// <auto-generated />
using System;
using ContinuoApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ContinuoApi.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20230324144318_ChangeDBNameToContinuoDB")]
    partial class ChangeDBNameToContinuoDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ContinuoApi.Models.Instrument", b =>
                {
                    b.Property<int>("InstrumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("InstrumentId");

                    b.HasIndex("UserId");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("ContinuoApi.Models.PracticeSession", b =>
                {
                    b.Property<int>("PracticeSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PracticeSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("PracticeSessions");
                });

            modelBuilder.Entity("ContinuoApi.Models.PracticeTask", b =>
                {
                    b.Property<int>("PracticeTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<int>("Minutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PracticeTaskId");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("UserId");

                    b.ToTable("PracticeTasks");
                });

            modelBuilder.Entity("ContinuoApi.Models.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("ContinuoApi.Models.SessionsTasks", b =>
                {
                    b.Property<int>("SessionsTasksId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PracticeSessionId")
                        .HasColumnType("int");

                    b.Property<int>("PracticeTaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("SessionsTasksId");

                    b.HasIndex("PracticeSessionId");

                    b.HasIndex("PracticeTaskId");

                    b.ToTable("SessionsTasks");
                });

            modelBuilder.Entity("ContinuoApi.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ContinuoApi.Models.Instrument", b =>
                {
                    b.HasOne("ContinuoApi.Models.User", "User")
                        .WithMany("Instruments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ContinuoApi.Models.PracticeSession", b =>
                {
                    b.HasOne("ContinuoApi.Models.User", "User")
                        .WithMany("PracticeSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ContinuoApi.Models.PracticeTask", b =>
                {
                    b.HasOne("ContinuoApi.Models.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContinuoApi.Models.User", "User")
                        .WithMany("PracticeTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ContinuoApi.Models.RefreshToken", b =>
                {
                    b.HasOne("ContinuoApi.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ContinuoApi.Models.SessionsTasks", b =>
                {
                    b.HasOne("ContinuoApi.Models.PracticeSession", "PracticeSession")
                        .WithMany()
                        .HasForeignKey("PracticeSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContinuoApi.Models.PracticeTask", "PracticeTask")
                        .WithMany("SessionsTasks")
                        .HasForeignKey("PracticeTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PracticeSession");

                    b.Navigation("PracticeTask");
                });

            modelBuilder.Entity("ContinuoApi.Models.PracticeTask", b =>
                {
                    b.Navigation("SessionsTasks");
                });

            modelBuilder.Entity("ContinuoApi.Models.User", b =>
                {
                    b.Navigation("Instruments");

                    b.Navigation("PracticeSessions");

                    b.Navigation("PracticeTasks");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
